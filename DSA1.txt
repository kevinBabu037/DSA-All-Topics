



void main(){
LinkedList l=LinkedList();

String res=stringReverse('kevin');
print(res);



}

class Node{
  dynamic data;
  Node? next;
  Node(this.data);
}

class LinkedList{
 Node? head;
 Node? tail;
 
  addingNode(dynamic data){
   Node newNode=Node(data);
   if(head==null){
    head=newNode;
   }else{
    tail!.next=newNode;
   }
   tail=newNode;
 }

 deleteMidele(){
  Node? fast=head;
  Node ? slow=head;
  Node ? prev;

   while(fast!=null && fast.next!=null){
    fast=fast.next!.next;
    prev=slow;
    slow=slow!.next;
    
   }
   
   if(prev!=null){
    prev.next=slow!.next;
   }

 }

  findMidle(){
    Node ? fast=head;
    Node ? slow=head;
  
  while(fast!=null && fast.next!=null){
     slow=slow!.next;
     fast=fast.next!.next;
  }
   return slow!.data;

  }


   insertBefore(int data ,int before){
    Node newNode=Node(data);
    Node? temp=head;
    Node ? prev;

    if(temp!=null && temp.data==before){
      newNode.next=temp;
      head=newNode;
      return;
    }
    while(temp!=null && temp.data!=before){
         prev=temp;
         temp=temp.next;
    }
    if(temp==null){
      return;
    }

    newNode.next=temp;
    prev!.next=newNode;

   }


 //palindr4ome
  palindrome() {
    var slow = head;
    var fast = head;
    while (fast != null && fast.next != null) {
      slow = slow!.next;
      fast = fast.next!.next;
    }
    var secondhead = slow!.next;
    slow.next = null;

    var returnedhead = reversepalindrome(secondhead);
    while (returnedhead != null && head != null) {
      if (head!.data == returnedhead.data) {
        returnedhead = returnedhead.next;
        head = head!.next;
      } else {
        return false;
      }
    }
    return true;
  }

  
   

  reversepalindrome(var secondhead) {
    Node? current = secondhead;
    Node? prev;
    Node? nextnode;

    while (current != null) {
      nextnode = current.next;
      current.next = prev;
      prev = current;
      current = nextnode;
    }
    secondhead = prev;
    return secondhead; 
}


 addingInHead(int data){
      Node newNode=Node(data);
      Node? temp=head; 

     newNode.next=temp;
     head=newNode;

      
    }


 displayNode(){
  Node? temp=head;

   while(temp!=null){
    print(temp.data);
    temp=temp.next;
   }
   
 }



 void reverse() {
  Node? current = head; // current node pointer
  Node? previous; // previous node pointer
  Node? nextNode; // next node pointer

  while (current != null) {
    // Save the next node
    nextNode = current.next;

    // Reverse the link
    current.next = previous;

    // Move pointers one position ahead
    previous = current;
    current = nextNode;
  }

  // Update the head pointer to the new first node of the reversed list
  head = previous;
}
  

  update(int changingVal, int newData){
    
    Node? temp=head;

    while(temp!=null && temp.data!= changingVal){
        temp=temp.next;
    }
    if(temp!=null){
      temp.data=newData;
    }
  }
  




  checkingreverse(){
    Node? corrent=head;
    Node? nextNode;
    Node ? prevNode;

    while(corrent!=null){
     nextNode=corrent.next;
     corrent.next=prevNode;

     prevNode=corrent;
     corrent=nextNode;

    }
    head=prevNode;
  }

  delete(dynamic data){
    Node ? temp=head;
    Node ? prev;
    if(temp!=null&&temp.data==data){
      head=temp.next;
      return;
    }
    while(temp!=null&&temp.data!=data){
      prev=temp;
      temp=temp.next;
    }
    if(temp==null){
      return;
    }
    if(temp==tail){
      tail=prev;
       prev!.next=null;
    }
    prev!.next=temp.next;
  }

insertAfter(dynamic nextTo,dynamic data){
   Node? temp=head;
   Node newNode=Node(data); 

   while(temp!=null&&temp.data!=nextTo){
     temp=temp.next;
   }
   if(temp==null){
    return;
   }

   if(temp==tail){
     tail!.next=newNode;
     tail=newNode;
     return;
   }
   
   newNode.next=temp.next;
   temp.next=newNode;

}
  
}



///// doubley linkedList



class Dnode{
  int data;
  Dnode? next;
  Dnode ? prev;
  Dnode(this.data);

}

class DlinkedList{
   Dnode? head;
   Dnode? tail;
  
  addNode(int data){
    Dnode newNode=Dnode(data);

    if(head==null){
      head=newNode;
    }else{
      tail!.next=newNode;
      newNode.prev=tail;
    }
    tail=newNode;
  }
   

  display(){
    Dnode? temp=head;
    while(temp!=null){
      print(temp.data);
    temp=temp.next;
    }
  }

  insert(int data, int afterThis){
     Dnode newNode=Dnode(data);
     Dnode ? temp=head;
     
     while (temp!=null && temp.data!=afterThis) {
        temp=temp.next;
     }
      if(temp==null){
        return;
      } 
      if(temp==tail){
        tail!.next=newNode;
        newNode.prev=tail;
        tail=newNode;
        return;
      }
      
     newNode.next=temp.next;
     temp.next=newNode;
     newNode.prev=temp;
     temp.next!.prev = newNode;
     
    
  }

  delete(int data){
    Dnode? temp=head;
    Dnode ? prev;
   if(temp!=null && temp.data==data){
     head=temp.next;
     return;
   }  
   if(head!=null){
    head!.prev=null;
   }
   while (temp !=null && temp.data!=data) {
     prev=temp;
     temp=temp.next; 
   } 
   if(temp==null){
    return;
   }
   if(temp==tail){ 
    tail=prev;
    prev!.next=null;
    return;
   }
   prev!.next=temp.next;
   temp.next!.prev=prev;
  }

}


//recurstions//

binarySearchInRecurstion(int target, List arr,int left , int right){

 if(left>right){
  return -1;
 }
 int mid = (left + right) ~/2;

 if(arr[mid] == target){
  return mid;
 }else if(arr[mid] < target){
  return binarySearchInRecurstion(target, arr, mid+1, right);
 }else {
  return binarySearchInRecurstion(target, arr, left, mid-1);
 }
 

}


int factorial(int n) {
  if (n == 0 || n == 1) {
    return 1;
  } else {
    return n * factorial(n - 1);
  }
}


fibinocii(int n){

  if(n==0 || n==1){
    return n;
  }else{
    return fibinocii(n-1) + fibinocii(n-2);
  }

}


checkPlindrome(String text){
  text=text.toLowerCase(); 
   if(text.length<=1){
     return true;
   }
   if(text[0]!=text[text.length-1]){
     return false;
   }
     return checkPlindrome(text.substring(1, text.length - 1));

}



 printList(List arr, [int index = 0]) {
  if (index == arr.length) {
    return;
  }
  print(arr[index]);
  printList(arr, index + 1);
}


int sumOfList(List list, [int index = 0]) {
  if (index == list.length) {
    return 0;
  }
  
  return list[index] + sumOfList(list, index + 1);
}


stringReverse(String text){

 if(text.isEmpty){
   return text ;
 }

 else{
  return stringReverse(text.substring(1))+text[0];
 }

}


checkAnagram(String str1,String target){
  List lst1= str1.split('')..sort();
  List lst2= target.split('')..sort();

  if(lst1.join()==lst2.join()){
    return true;
  }else{
    return false;
  }
  
}



